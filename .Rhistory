data=airquality,
main="Cajas y bigotes",
xlab="Meses",
ylab="Temperatura",
col=c("red", 'green', 'blue', 'orange', 'pink')
)
boxplot(temp~month,
data=airquality,
main="Cajas y bigotes",
xlab="Meses",
ylab="Temperatura",
col=plotColors
)
?rainbow
boxplot(temp~month,
data=airquality,
main="Cajas y bigotes",
xlab="Meses",
ylab="Temperatura",
col=rainbow(5)
)
boxplot(temp~month,
data=airquality,
main="Cajas y bigotes",
xlab="Meses",
ylab="Temperatura",
col=rainbow(5)
)
data1 <- runif(1000, min = 1000, max = 9999)
dataSerial <- round(data1, digits = 3)
dataFinal <- round(dataserial, digits = 0)
is.even <- function(x) x%%2==0
dataFinal[is.even(dataFinal)]
sum(is.even(dataFinal))
data1 <- runif(1000, min = 1000, max = 9999)
dataSerial <- round(data1, digits = 3)
dataFinal <- round(dataSerial, digits = 0)
is.even <- function(x) x%%2==0
dataFinal[is.even(dataFinal)]
sum(is.even(dataFinal))
chalets <- read.table("C:/Users/JaqDe/Desktop/MBDA/R/datos/chalets.txt", header=TRUE, quote="\"")
df <- as.data.frame(chalets)
apply(X = df,MARGIN = 2,FUN = mean)
apply(df,2,mean)
SimFisher <- function(x){
#Calculamos la media de la lista.
media <- sapply(x, mean)
#print(media)
#Calculamos la desviación estándar de la lista.
desviacionTipica <- sapply(x, sd)
#print(desviacionTipica)
#Calculamos el coeficiente de Sim. Fisher.
n <- nrow(x)
sumaCuadraticaSinMedia <- 0
for (i in 1:n)
{
#print(typeof(x[i,1]))
#print(typeof(media))
#print(typeof(x[i,1] - media))
#print(typeof((x[i,1] - media)^2))
sumaCuadraticaSinMedia <- sumaCuadraticaSinMedia + (x[i,1] - media)^2
#print(sumaCuadraticaSinMedia)
}
S3X <- (sumaCuadraticaSinMedia / (n - 1))^(3/2)
coefSimFisher <- sumaCuadraticaSinMedia / (n * S3X)
#print(coefSimFisher)
listaResultados <- list("media" = media, "desviacionTipica" = desviacionTipica, "coefSimFisher" = coefSimFisher)
return(listaResultados)
}
chalets <- read.table("D:/Users/JaqDe/Desktop/MBDA/R/datos/chalets.txt", header=TRUE, quote="\"")
df <- as.data.frame(chalets)
apply(X = df,MARGIN = 2,FUN = mean)
apply(df,2,mean)
SimFisher <- function(x){
#Calculamos la media de la lista.
media <- sapply(x, mean)
#print(media)
#Calculamos la desviación estándar de la lista.
desviacionTipica <- sapply(x, sd)
#print(desviacionTipica)
#Calculamos el coeficiente de Sim. Fisher.
n <- nrow(x)
sumaCuadraticaSinMedia <- 0
for (i in 1:n)
{
#print(typeof(x[i,1]))
#print(typeof(media))
#print(typeof(x[i,1] - media))
#print(typeof((x[i,1] - media)^2))
sumaCuadraticaSinMedia <- sumaCuadraticaSinMedia + (x[i,1] - media)^2
#print(sumaCuadraticaSinMedia)
}
S3X <- (sumaCuadraticaSinMedia / (n - 1))^(3/2)
coefSimFisher <- sumaCuadraticaSinMedia / (n * S3X)
#print(coefSimFisher)
listaResultados <- list("media" = media, "desviacionTipica" = desviacionTipica, "coefSimFisher" = coefSimFisher)
return(listaResultados)
}
chalets <- read.table("D:/Universidad/master/documentacion/Master BDBA/R/datos/datos/chalets.txt", quote="\"")
View(chalets)
chalets <- read.table("D:/Universidad/master/documentacion/Master BDBA/R/datos/datos/chalets.txt", quote="\"")
df <- as.data.frame(chalets)
apply(X = df,MARGIN = 2,FUN = mean)
apply(df,2,mean)
SimFisher <- function(x){
#Calculamos la media de la lista.
media <- sapply(x, mean)
#print(media)
#Calculamos la desviación estándar de la lista.
desviacionTipica <- sapply(x, sd)
#print(desviacionTipica)
#Calculamos el coeficiente de Sim. Fisher.
n <- nrow(x)
sumaCuadraticaSinMedia <- 0
for (i in 1:n)
{
#print(typeof(x[i,1]))
#print(typeof(media))
#print(typeof(x[i,1] - media))
#print(typeof((x[i,1] - media)^2))
sumaCuadraticaSinMedia <- sumaCuadraticaSinMedia + (x[i,1] - media)^2
#print(sumaCuadraticaSinMedia)
}
S3X <- (sumaCuadraticaSinMedia / (n - 1))^(3/2)
coefSimFisher <- sumaCuadraticaSinMedia / (n * S3X)
#print(coefSimFisher)
listaResultados <- list("media" = media, "desviacionTipica" = desviacionTipica, "coefSimFisher" = coefSimFisher)
return(listaResultados)
}
apply(X = df,MARGIN = 2,FUN = mean)
apply(df,2,mean)
sapply(df,2,mean)
sapply(X = df,MARGIN = 2,FUN = mean)
chalets <- read.table("D:/Universidad/master/documentacion/Master BDBA/R/datos/datos/chalets.txt", quote="\"")
df <- as.data.frame(chalets)
sapply(X = df,MARGIN = 2,FUN = mean)
sapply(df,2,mean)
sapply(df,mean)
chalets <- read.table("D:/Universidad/master/documentacion/Master BDBA/R/datos/chalets.txt", sep=";", quote="\"")
View(chalets)
chalets
Conversor_cm <- function(x){
if (x < 0)
stop("Número introducido menor que cero.")
shaku <- x/30.3
ken <- 6*(shaku)
listaResultados <- list("shaku" = round(shaku, digits =2), "ken" = round(ken, digits = 2))
return(listaResultados)
}
Resultados <- c(7000,3000, 5000, 4000, 5000, 7000, 4000, 7500, 8000, 5000, 5000, 500, 3000, 7000, 10000, 15000, 5000, 7500, 12000, 8000, 4000, 5000, 3000, 5000, 10000, 3000, 4000, 5000, 7000, 5000, 3000, 4000, 7000, 4000, 7000, 5000, 4000, 7000, 10000, 7500, 7000, 8000, 7500, 7000, 7500, 8000, 7000, 7000, 12000, 8000)
hist(Resultados)
#b)
intervaloInicial <- min(Resultados)
intervaloFinal   <- max(Resultados)
numeroPasos      <- 5
paso             <- (intervaloFinal - intervaloInicial) / numeroPasos
grupos <- seq(from = intervaloInicial, to = intervaloFinal, by = paso)
hist(x = Resultados, breaks = grupos)
Empleados <- read.delim("D:/Universidad/master/documentacion/Master BDBA/R/datos/Empleados.dat")
#después lo guardamos.
save(Empleados, file = "Empleados.RData")
# b) Selecciona las 10 primeras filas de la variable "salini"
names(Empleados) <- c('id', 'sexo', 'fechanac', 'educ', 'catlab', 'salario', 'salini', 'tiempopemp', 'expprev')
salini <- df[,"salini"]
salini[1:10]
# c)Selecciona las filas 4 y 8 de la variable "salario"
Empleados$salario[c(4, 8)]
# d)Seleccione el elemento 3 de la columna 4
Empleados[3,4]
# e) Seleccione las columnas 1 y 4 de dos formas distinta. ¿Los objetos son los mismos?
a <- Empleados[c("id", "educ")]
b <- Empleados[,c(1,4)]
class(a)
class(b)
salini <- Empleados[,"salini"]
salini[1:10]
Empleados$salario[c(4, 8)]
subset_qts <- subset.data.frame(Empleados, Empleados$salario > quantile(Empleados$salario, probs = 0.75)
& Empleados$salini > quantile(Empleados$salini,probs = 0.75)
& Empleados$educ > quantile(Empleados$educ, probs = 0.75)
& Empleados$tiempopemp > quantile(Empleados$tiempopemp, probs = 0.75)
& Empleados$expprev > quantile(Empleados$expprev, probs = 0.75)
)
subset_qts <- subset.data.frame(Empleados, Empleados$salario > quantile(Empleados$salario, probs = 0.75)
& Empleados$salini > quantile(Empleados$salini,probs = 0.75)
& Empleados$educ > quantile(Empleados$educ, probs = 0.75)
& Empleados$tiempopemp > quantile(Empleados$tiempopemp, probs = 0.75)
& Empleados$expprev > quantile(Empleados$expprev, probs = 0.75)
)
subset_qts <- subset.data.frame(Empleados, Empleados$salario > quantile(Empleados$salario, probs = 0.75)
& Empleados$salini > quantile(Empleados$salini,probs = 0.75)
& Empleados$educ > quantile(Empleados$educ, probs = 0.75)
& Empleados$tiempopemp > quantile(Empleados$tiempopemp, probs = 0.75)
& Empleados$expprev > quantile(Empleados$expprev, probs = 0.75)
)
View(subset_qts)
Empleados <- read.delim("D:/Universidad/master/documentacion/Master BDBA/R/datos/Empleados.dat")
#después lo guardamos.
save(Empleados, file = "Empleados.RData")
load("D:/Universidad/master/documentacion/Master BDBA/R/datos/Empleados.RData")
ozono <- airquality[,"Ozone"]
solar <- airquality[, "Solar.R"]
wind  <- airquality[, "Wind"]
temp  <- airquality[, "Temp"]
plotRange  <- range(c(solar, wind, temp, ozono), na.rm = TRUE)
plotColors <- c("red", "blue", "pink", "orange")
#El tamaño de la ventana original de RStudio es demasiado pequeña y no muestra correctamente el plot
windows(width=16, height=9)
plot(ozono, type = "l", col = "red", lty = 1, ylim = plotRange, main = "airquality", ylab = "dat", xlab = "")
par(new = TRUE)
plot(solar, type = "l", col = "blue", lty = 2, ylim = plotRange, ylab = "", xlab = "")
par(new = TRUE)
plot(wind, type = "l", col = "pink", lty = 3, ylim = plotRange, ylab = "", xlab = "")
par(new = TRUE)
plot(temp, type = "l", col = "orange", lty = 4, ylim = plotRange, ylab = "", xlab = "")
#legend('topright', legend=c("Ozone", "Solar", "Wind", "Temp"),
#     col=c("red", "blue", "pink", "orange"), lty=1:4, cex=0.8, bty = "n")
legend("topright", legend=c("Ozone", "Solar", "Wind", "Temp"),
col=plotColors, fill = plotColors, cex=0.75, bty = "n", xjust = 1, yjust = 1)
#c)
boxplot(Temp~Month, data=airquality, main="Cajas y bigotes", xlab="Meses", ylab="Temperatura", col=rainbow(5))
ozono <- airquality[,"Ozone"]
solar <- airquality[, "Solar.R"]
wind  <- airquality[, "Wind"]
temp  <- airquality[, "Temp"]
plotRange  <- range(c(solar, wind, temp, ozono), na.rm = TRUE)
plotColors <- c("red", "blue", "pink", "orange")
#El tamaño de la ventana original de RStudio es demasiado pequeña y no muestra correctamente el plot
windows(width=16, height=9)
plot(ozono, type = "l", col = "red", lty = 1, ylim = plotRange, main = "airquality", ylab = "dat", xlab = "")
par(new = TRUE)
plot(solar, type = "l", col = "blue", lty = 2, ylim = plotRange, ylab = "", xlab = "")
par(new = TRUE)
plot(wind, type = "l", col = "pink", lty = 3, ylim = plotRange, ylab = "", xlab = "")
par(new = TRUE)
plot(temp, type = "l", col = "orange", lty = 4, ylim = plotRange, ylab = "", xlab = "")
#legend('topright', legend=c("Ozone", "Solar", "Wind", "Temp"),
#     col=c("red", "blue", "pink", "orange"), lty=1:4, cex=0.8, bty = "n")
legend("topright", legend=c("Ozone", "Solar", "Wind", "Temp"),
col=plotColors, fill = plotColors, cex=0.75, bty = "n", xjust = 1, yjust = 1)
chalets <- read.table("D:/Universidad/master/documentacion/Master BDBA/R/datos/datos/chalets.txt", quote="\"", skip = 7)
View(chalets)
chalets <- read.table("D:/Universidad/master/documentacion/Master BDBA/R/datos/datos/chalets.txt", quote="\"", skip = 8, header = TRUE)
View(chalets)
sapply(X = df,MARGIN = 2,FUN = mean)
chalets <- read.table("D:/Universidad/master/documentacion/Master BDBA/R/datos/datos/chalets.txt", quote="\"", skip = 8, header = TRUE)
df <- as.data.frame(chalets)
sapply(X = df,MARGIN = 2,FUN = mean)
sapply(X = df1[, c("x1, x3")],MARGIN = 2,FUN = mean)
df1 <- as.data.frame(chalets)
sapply(X = df1[, c("x1, x3")],MARGIN = 2,FUN = mean)
sapply(X = df1[, c("x1", "x3")],MARGIN = 2,FUN = mean)
chalets <- read.table("D:/Universidad/master/documentacion/Master BDBA/R/datos/datos/chalets.txt", quote="\"", skip = 8, header = TRUE)
df1 <- as.data.frame(chalets)
sapply(X = df1[, c("x1", "x3")],MARGIN = 2,FUN = mean)
alumnoestatura <- read.csv2("D:/Universidad/master/documentacion/Master BDBA/estadistica/alumnoestatura.txt", sep="")
View(alumnoestatura)
mean(alumnoestatura)
mean(alumnoestatura$Estatura)
datamain <- read.csv2("D:/Universidad/master/documentacion/Master BDBA/estadistica/alumnoestatura.txt", sep="")
#Medidas de Centralización:
#media
mean(datamain$Estatura)
datamain <- read.csv2("D:/Universidad/master/documentacion/Master BDBA/estadistica/alumnoestatura.txt", sep="")
#Medidas de Centralización:
#media
mean(datamain$Estatura)
mode(datamain$Estatura)
median(datamain$Estatura)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(datamain$Estatura)
quantile(datamain$Estatura)
?quantile
quantile(datamain$Estatura, prob=seq(0, 1, length = 11))
quantile(datamain$Estatura, prob=seq(0, 1, length = 10))
quantile(datamain$Estatura, prob = seq(0, 1, length = 11))
# percentiles
quantile(datamain$Estatura, prob = seq(0, 1, length = 101))
quantile(datamain$Estatura, prob = seq(0, 1, length = 10))
save.image("D:/Universidad/master/documentacion/Master BDBA/estadistica/entrega.RData")
getmode <- function(x) {
uniqvalues <- unique(x)
uniqvalues[which.max(tabulate(match(x, uniqvalues)))]
}
getmode(datamain$Estatura)
getrange <- function(x) {
max(x) - min(x)
}
getrange(datamain$Estatura)
max(datamain$Estatura)
min(datamain$Estatura)
datamain$Estatura
var(datamain$Estatura)
save.image("D:/Universidad/master/documentacion/Master BDBA/estadistica/entrega.RData")
?std
?sd
sd
#varianza
var(datamain$Estatura)
datamain <- read.csv2("D:/Universidad/master/documentacion/Master BDBA/estadistica/alumnoestatura.txt", sep="")
datamain <- read.csv2("D:/Universidad/master/documentacion/Master BDBA/estadistica/alumnoestatura.txt", sep="")
#Medidas de Centralización:
#Medidas de posición central
#media
mean(datamain$Estatura)
#mediana
median(datamain$Estatura)
#moda
getmode <- function(x) {
uniqvalues <- unique(x)
uniqvalues[which.max(tabulate(match(x, uniqvalues)))]
}
getmode(datamain$Estatura)
#medidas de posición no central
#cuartiles
quantile(datamain$Estatura)
# deciles
quantile(datamain$Estatura, prob = seq(0, 1, length = 11))
# percentiles
quantile(datamain$Estatura, prob = seq(0, 1, length = 101))
#range
getrange <- function(x) {
max(x) - min(x)
}
getrange(datamain$Estatura)
#varianza
var(datamain$Estatura)
sd(datamain$Estatura)
getPearson <- function(x) {
sd(x)/mean(x)
}
getPearson(datamain$Estatura)
save.image("D:/Universidad/master/documentacion/Master BDBA/estadistica/entrega.RData")
boxplot(datamain$Alumno~datamain$Estatura, data = datamain, main = "cajas y bigotes")
boxplot(datamain$Estatura, data = datamain, main = "cajas y bigotes")
alumnoestaturapeso <- read.csv2("D:/Universidad/master/documentacion/Master BDBA/estadistica/alumnoestaturapeso.txt", sep="")
View(alumnoestaturapeso)
datapeso <- read.csv2("D:/Universidad/master/documentacion/Master BDBA/estadistica/alumnoestaturapeso.txt", sep="")
datapeso
max(datapeso$Estatura)
min(datapeso$Estatura)
quantile(datapeso$Estatura)
min(datapeso$Peso)
max(datapeso$Peso)
estatura <- datapeso$Estatura
peso <- datapeso$Peso
range(estatura)
min(peso)
max(peso)
min(estatura)
max(estatura)
findInterval(peso)
findInterval(x = peso, vec = x)
findInterval(x = peso, vec = peso)
findInterval(x = peso, vec = c(1,2))
findInterval(x = peso)
findInterval(vec = peso)
breaks = seq(1.21,1.32, by = 0.02)
breaks
breaks = seq(1.21,1.32, by = 0.0225)
breaks
breaks = seq(1.20,1.30, by = 0.025)
breaks
datapeso$Estatura.cut = cut(datapeso$Estatura, breaks, right = FALSE)
datapeso$Estatura.cut
datapeso$Estatura.freq = table(datapeso$Estatura.cut)
hist(datapeso$Estatura)
hist(datapeso$Peso)
datapeso$Estatura
datapeso$Estatura.cut = cut(datapeso$Estatura, breaks, right = TRUE)
datapeso$Estatura.cut
estatura.cut = cut(datapeso$Estatura, breaks, right = TRUE)
estatura.freq = table(estatura.cut)
estatura.freq
breaks.peso = seq(31, 35 , by = 1)
peso.cut = cut(peso, breaks.peso, right = TRUE)
peso.cut
peso.cut = cut(peso, breaks.peso, right = False)
peso.cut = cut(peso, breaks.peso, right = FALSE)
peso.cut
breaks.peso = seq(30, 36 , by = 6/4)
peso.cut = cut(peso, breaks.peso, right = FALSE)
peso.cut
peso.cut = cut(peso, breaks.peso, right = TRUE)
peso.cut
breaks.peso = seq(30, 36 , by = 6/4)
peso.freq = table(peso.cut)
peso.freq = table(peso.cut)
peso.freq
estatura.freq
table(estatura.freq, peso.freq)
table(estatura.cut, peso.cut)
tablacontingencia <- table(estatura.cut, peso.cut)
tablacontingencia
estatura.cut = cut(estatura2, breaks.estatura, right = TRUE)
breaks.peso = seq(30, 36 , by = 6/4)
peso.cut = cut(peso, breaks.peso, right = TRUE)
tablacontingencia <- table(estatura.cut, peso.cut)
datamain <- read.csv2("D:/Universidad/master/documentacion/Master BDBA/estadistica/alumnoestatura.txt", sep="")
#Medidas de Centralización:
#Medidas de posición central
#media
estatura <- datamain$Estatura
mean(estatura)
#mediana
median(estatura)
#moda
getmode <- function(x) {
uniqvalues <- unique(x)
uniqvalues[which.max(tabulate(match(x, uniqvalues)))]
}
getmode(estatura)
#medidas de posición no central
#cuartiles
quantile(estatura)
# deciles
quantile(estatura, prob = seq(0, 1, length = 11))
# percentiles
quantile(estatura, prob = seq(0, 1, length = 101))
#range
getrange <- function(x) {
max(x) - min(x)
}
getrange(estatura)
#varianza
var(estatura)
#desviación estándar
sd(estatura)
#alternativamente se puede calcular como la raíz cuadrada de la varianza
sqrt(var(estatura))
#coeficiente de variación de Pearson
#el coeficiente de variación de Pearson se calcula como el cociente
#entre desviación típica y la media
getPearson <- function(x) {
sd(x)/mean(x)
}
getPearson
#diagrama de cajas y bigotes
boxplot(estatura, data = datamain, main = "cajas y bigotes")
# b)dado el siguiente conjunto de datos obtener la tabla de
#correspondencias con R agrupando cada variable en cuatro clases o
#intervalos. Estos deberán ser elegidos por el alumno.
datapeso <- read.csv2("D:/Universidad/master/documentacion/Master BDBA/estadistica/alumnoestaturapeso.txt", sep="")
peso <- datapeso$Peso
estatura2 <- datapeso$Estatura
range(estatura2)
breaks.estatura = seq(1.20,1.30, by = 0.025)
estatura.cut = cut(estatura2, breaks.estatura, right = TRUE)
#estatura.freq = table(estatura.cut)
breaks.peso = seq(30, 36 , by = 6/4)
peso.cut = cut(peso, breaks.peso, right = TRUE)
#peso.freq = table(peso.cut)
tablacontingencia <- table(estatura.cut, peso.cut)
t.test(primeramitad, segundamitad, var.equal = TRUE)
source('D:/Universidad/master/documentacion/Master BDBA/estadistica/script.R', encoding = 'UTF-8')
t.test(primeramitad, segundamitad, var.equal = TRUE)
load("D:/Universidad/master/documentacion/Master BDBA/mineria/Material Campus/entregaworkspace.RData")
source('D:/Universidad/master/documentacion/Master BDBA/mineria/SegundaParte/entrega.R', echo=TRUE)
corrPlotDatos <- corrplot(matrizR, type="upper", order="hclust",tl.col="black", tl.srt=90)
View(corrPlotDatos)
corrPlotDatos <- corrplot(matrizR, type="upper", order="hclust",tl.col="black", tl.srt=90, order)
corrPlotDatos <- corrplot(matrizR, type="upper", order="descending",tl.col="black", tl.srt=90, )
corrPlotDatos <- corrplot(matrizR, type="upper", order="FPC",tl.col="black", tl.srt=90, )
corrPlotDatos <- corrplot(matrizR, type="upper", order="hclust",tl.col="black", tl.srt=90, order)
corrPlotDatos <- corrplot(matrizR, type="upper", order="hclust",tl.col="black", tl.srt=90)
library(FactoMineR)
install.packages("FactoMineR")
library(FactoMineR)
fit <-PCA(datos, sclae.unit=T, ncp = 7, graph = T)
fit <-PCA(datos, scalee.unit=T, ncp = 7, graph = T)
fit <-PCA(datos, scalee.unit=T, ncp = 7, graph = T)
fit <-PCA(datos, scale.unit=T, ncp = 7, graph = T)
head(fit)
library(factoextra)
install.packages("factoextra")
library(factoextra)
library(ggplot2)
fviz_eig(fit, addlabels = T)
str(fit)
summmary(fit)
summary(fit)
fit[$var$cor]
head(fit)
varcor <- head(fit)[$var$cor]
varcor <- (head(fit)[$var$cor])
varcor <- (head(fit)['$var$cor'])
varcor
rm(varcor)
typeof(head(fit))
visualfit <- head(fit)
visualfit["var"]
visualfit[$var$cor]
visualfit["varcor"]
visualfit["var$cor"]
visualfit["var$var$cor"]
visualfit["var"]
fviz_eig(fit, addlabels = T)
9.1 + 63.7 + 14.2
visualfit["var"]
fitLimpio <- PCA(datos, scale.unit=T, ncp = 3, graph = T)
fitLimpio
fitLimpio <- PCA(datos, scale.unit=T, ncp = 3, graph = T)
FitLimpio
fitLimpio
visualFitLimpio <- head(fitLimpio)
visualFitLimpio
visualFitLimpio["var"]
str(datos)
visualFitLimpio["var"]
